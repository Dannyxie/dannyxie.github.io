<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deryck</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://derycktse.github.io/"/>
  <updated>2017-03-22T15:07:58.000Z</updated>
  <id>https://derycktse.github.io/</id>
  
  <author>
    <name>Deryck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三个关于数组的小技巧</title>
    <link href="https://derycktse.github.io/2016/04/14/%E4%B8%89%E4%B8%AA%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://derycktse.github.io/2016/04/14/三个关于数组的小技巧/</id>
    <published>2016-04-14T02:36:07.000Z</published>
    <updated>2017-03-22T15:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-可迭代的空数组"><a href="#1-可迭代的空数组" class="headerlink" title="1.可迭代的空数组"></a>1.可迭代的空数组</h3><p>我们知道，Javacript的所创建的数组如果未被初始化值的话，它是一个稀疏数组(sparse array)，这是什么意思的？我们先看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">//[undefined, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure></p>
<p>假设我们要去迭代一个数组，我们会发现，未被初始化值的数组，index实际上访问不到的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index); <span class="comment">//  输出:[undefined, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>我们分别来看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description" target="_blank" rel="external">Array.prototype.forEach</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description" target="_blank" rel="external">Array.prototype.map</a>的描述，可以留意到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values, including undefined. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forEach() executes the provided callback once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</div></pre></td></tr></table></figure>
<p>对于<code>forEach</code>与<code>map</code>这类方法，如果数组有未被初始化值的index, 默认是不回被遍历的。</p>
<p>那么， 如何创建一个所有值默认可被遍历的数组呢？很简单，我们只需要多加一步操作:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)); <span class="comment">//借助apply给每一个数组的每一个index都赋值</span></div><div class="line">arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index); <span class="comment">//这样的话改数组就可以遍历了, 输出 [0, 1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="2-利用数组给方法传递空参数"><a href="#2-利用数组给方法传递空参数" class="headerlink" title="2.利用数组给方法传递空参数"></a>2.利用数组给方法传递空参数</h3><p>我们调用方法的时候，有时想对一些参数进行忽略，比如下面的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">'parameter1'</span>, , <span class="string">'parameter3'</span>); <span class="comment">//会报错， Uncaught SyntaxError: Unexpected token ,</span></div></pre></td></tr></table></figure></p>
<p>这个时候通常我们的做法是会传一个<code>null</code> 或者 <code>undefined</code> 作为占位<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">'parameter1'</span>, <span class="literal">null</span>, <span class="string">'parameter3'</span>)</div><div class="line"><span class="comment">//或者</span></div><div class="line">method(<span class="string">'paramter1'</span>, <span class="literal">undefined</span>, <span class="string">'parameter3'</span>);</div></pre></td></tr></table></figure></p>
<p>我们可以借助ES6的展开语法(…)来辅助传参<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(...[&apos;parameter1&apos;, , &apos;paramter3&apos;]); // 大功告成!</div></pre></td></tr></table></figure></p>
<h3 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3. 数组去重"></a>3. 数组去重</h3><p>使用展开符号搭配<code>set</code>进行数组去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const arr = [...new Set([1, 2, 3, 3])];//[1, 2, 3]</div></pre></td></tr></table></figure></p>
<p>参考来源:<br> <a href="http://www.jstips.co/en/javascript/3-array-hacks/" target="_blank" rel="external">3 Array Hacks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-可迭代的空数组&quot;&gt;&lt;a href=&quot;#1-可迭代的空数组&quot; class=&quot;headerlink&quot; title=&quot;1.可迭代的空数组&quot;&gt;&lt;/a&gt;1.可迭代的空数组&lt;/h3&gt;&lt;p&gt;我们知道，Javacript的所创建的数组如果未被初始化值的话，它是一个稀疏数组(sparse array)，这是什么意思的？我们先看下面的代码&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[undefined, undefined, undefined, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设我们要去迭代一个数组，我们会发现，未被初始化值的数组，index实际上访问不到的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;arr.map(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;elem, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; index); &lt;span class=&quot;comment&quot;&gt;//  输出:[undefined, undefined, undefined, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="es2015" scheme="https://derycktse.github.io/tags/es2015/"/>
    
      <category term="javascript" scheme="https://derycktse.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用require.ensure进行代码分割</title>
    <link href="https://derycktse.github.io/2016/03/16/webpack%E4%BD%BF%E7%94%A8require-ensure%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
    <id>https://derycktse.github.io/2016/03/16/webpack使用require-ensure进行代码分割/</id>
    <published>2016-03-15T20:52:13.000Z</published>
    <updated>2017-03-22T15:08:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><p>实例来自于<a href="https://webpack.js.org/guides/code-splitting-require/" target="_blank" rel="external">webpack</a><br>假定我们有下面的项目结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── dist</div><div class="line">├── js</div><div class="line">│   ├── a.js</div><div class="line">│   ├── b.js</div><div class="line">│   ├── c.js</div><div class="line">│   └── entry.js</div><div class="line">└── webpack.config.js</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>文件内容<br>entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require(&apos;./a&apos;);</div><div class="line">require.ensure([&apos;./b&apos;], function(require)&#123;</div><div class="line">    require(&apos;./c&apos;);</div><div class="line">    console.log(&apos;done!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>a.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM a *****&apos;);</div></pre></td></tr></table></figure></p>
<p>b.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM b *****&apos;);</div></pre></td></tr></table></figure></p>
<p>c.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM c *****&apos;);</div></pre></td></tr></table></figure></p>
<p>下面我们看一下<code>webpack.config.js</code>的配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports =  &#123;</div><div class="line">		<span class="attr">entry</span> : <span class="string">'./js/entry.js'</span></div><div class="line">		,</div><div class="line">		<span class="attr">output</span> : &#123;</div><div class="line">			<span class="attr">filename</span> : <span class="string">'bundle.js'</span></div><div class="line">			, <span class="attr">path</span> : path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">			, <span class="attr">publicPath</span>: <span class="string">'./dist/'</span> <span class="comment">//当使用代码分割时，publicPath很重要，它将告诉webpack从哪儿去加载其他打包的文件</span></div><div class="line">			, <span class="attr">pathinfo</span> : <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>执行webpack打包之后，我们可以看到结果<br><img src="https://segmentfault.com/img/bVJS9m?w=1352&amp;h=528" alt="执行webpack打包"></p>
<p>我们发现，webpack打包生成了<code>bundle.js</code>以及<code>1.bundle.js</code>两个文件<br>查看文件的内容，我们可以发现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bundle.js</span></div><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">/*</span></div><div class="line">				webpack 集成的代码，这里略</div><div class="line">			*/</div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">"./dist/"</span>; <span class="comment">//按需加载的路径</span></div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/*!*********************!*\</span></div><div class="line">  !*** ./js/entry.js ***!</div><div class="line">  \*********************/</div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"></div><div class="line">	__webpack_require__(<span class="comment">/*! ./a */</span> <span class="number">1</span>)</div><div class="line"></div><div class="line">	__webpack_require__.e<span class="comment">/* nsure */</span>(<span class="number">1</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">		__webpack_require__(<span class="comment">/*! ./c */</span> <span class="number">3</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'done!'</span>)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line">  !*** ./js/a.js ***!</div><div class="line">  \*****************/</div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am a'</span>)</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/******/</span> ]);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.bundle.js</span></div><div class="line">webpackJsonp([<span class="number">1</span>],[</div><div class="line"><span class="comment">/* 0 */</span>,</div><div class="line"><span class="comment">/* 1 */</span>,</div><div class="line"><span class="comment">/* 2 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line">  !*** ./js/b.js ***!</div><div class="line">  \*****************/</div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am b'</span>)</div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 3 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line">  !*** ./js/c.js ***!</div><div class="line">  \*****************/</div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am c'</span>)</div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
<p><code>a.js</code>的内容被打包到bundle.js之中,而<code>b.js</code>,<code>c.js</code>则位于<code>1.bundle.js</code>中,<code>b.js</code>,<code>c.js</code>从主入口文件中分离了出来，而且只有<code>c.js</code>的内容被执行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码分割&quot;&gt;&lt;a href=&quot;#代码分割&quot; class=&quot;headerlink&quot; title=&quot;代码分割&quot;&gt;&lt;/a&gt;代码分割&lt;/h2&gt;&lt;p&gt;实例来自于&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-require/&quot;&gt;webpack&lt;/a&gt;&lt;br&gt;假定我们有下面的项目结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── a.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── b.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── c.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── entry.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── webpack.config.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>为gulp任务传递参数</title>
    <link href="https://derycktse.github.io/2016/03/15/%E4%B8%BAgulp%E4%BB%BB%E5%8A%A1%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>https://derycktse.github.io/2016/03/15/为gulp任务传递参数/</id>
    <published>2016-03-14T16:26:36.000Z</published>
    <updated>2017-03-22T15:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在web前端的脚手架中，有相当一部分数量的人选择用gulp做为首选的构建工具，但是，我们是没办法向gulp的任务直接传递命令行参数的。<br>我们知道gulp实际上是运行在nodejs中的，那么，我们是可以访问<code>process.argv</code><br>比如命令<code>gulp task1 --a 123 --b &quot;my string&quot; --c</code>, 我们看看<code>process.argv</code>会输出什么<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"><span class="string">'/usr/bin/nodejs'</span>,</div><div class="line"><span class="string">'/home/user/.node_modules_global/bin/gulp'</span>,</div><div class="line"><span class="string">'task1'</span>,</div><div class="line"><span class="string">'--a'</span>,</div><div class="line"><span class="string">'123'</span>,</div><div class="line"><span class="string">'--b'</span>,</div><div class="line"><span class="string">'my string'</span>,</div><div class="line"><span class="string">'--c'</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>既然可以拿到命令行输入的东西，那么我们就可以自己写一个参数解析的函数啦!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fetch command line arguments</span></div><div class="line"><span class="keyword">const</span> arg = (<span class="function"><span class="params">argList</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> arg = &#123;&#125;, a, opt, thisOpt, curOpt;</div><div class="line">  <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; argList.length; a++) &#123;</div><div class="line"></div><div class="line">    thisOpt = argList[a].trim();</div><div class="line">    opt = thisOpt.replace(<span class="regexp">/^\-+/</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (opt === thisOpt) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// argument value</span></div><div class="line">      <span class="keyword">if</span> (curOpt) arg[curOpt] = opt;</div><div class="line">      curOpt = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="comment">// argument name</span></div><div class="line">      curOpt = opt;</div><div class="line">      arg[curOpt] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line"></div><div class="line">&#125;)(process.argv);</div><div class="line"><span class="built_in">console</span>.log(arg) <span class="comment">//&#123; a: '123', b: 'my string', c: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>搞定！</p>
<p>当然，这只是一个简单的实现。<br>我们还可以使用功能更强大的库, 比如TJ大神的<a href="https://github.com/tj/commander" target="_blank" rel="external">commander</a></p>
<p>参考<br><a href="https://www.sitepoint.com/pass-parameters-gulp-tasks/" target="_blank" rel="external">How to Pass Command Line Parameters to Gulp Tasks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在web前端的脚手架中，有相当一部分数量的人选择用gulp做为首选的构建工具，但是，我们是没办法向gulp的任务直接传递命令行参数的。&lt;br&gt;我们知道gulp实际上是运行在nodejs中的，那么，我们是可以访问&lt;code&gt;process.argv&lt;/code&gt;&lt;br&gt;比如命令&lt;code&gt;gulp task1 --a 123 --b &amp;quot;my string&amp;quot; --c&lt;/code&gt;, 我们看看&lt;code&gt;process.argv&lt;/code&gt;会输出什么&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;/usr/bin/nodejs&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;/home/user/.node_modules_global/bin/gulp&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;task1&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--a&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--b&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;my string&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--c&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门</title>
    <link href="https://derycktse.github.io/2016/03/10/webpack%E5%85%A5%E9%97%A8/"/>
    <id>https://derycktse.github.io/2016/03/10/webpack入门/</id>
    <published>2016-03-10T14:34:59.000Z</published>
    <updated>2017-03-22T15:08:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>webpack是一个module bundler，可以将把有依赖关系的各种文件打包成一系列的静态资源</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先我们安装最新版的webpack, 我安装的版本是2.2.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure></p>
<p>下面我们将探讨webpack 2 的使用</p>
<p>我们可以直接在终端中使用webpack，命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">webpack &#123;源文件／入口文件&#125; &#123;目标文件&#125;</div><div class="line">webpack --watch //监听模式</div><div class="line">webpack -p //混淆脚本</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>考虑到随着我们项目复杂度的增高，有可能我们的配置选项也会很多，所以，我们完全可以将配置放到文件中, webpack在执行的时候默认会加载webpack.config.js文件作为配置, 如果我们需要指定配置文件的话，方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --config &#123;配置文件&#125;</div></pre></td></tr></table></figure></p>
<p>我们来看下webpack都有哪些配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// click on the name of the option to get to the detailed documentation</span></div><div class="line">  <span class="comment">// click on the items with arrows to show more examples / advanced options</span></div><div class="line"></div><div class="line">  entry: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></div><div class="line">  <span class="comment">// Here the application starts executing</span></div><div class="line">  <span class="comment">// and webpack starts bundling</span></div><div class="line"></div><div class="line">  output: &#123;</div><div class="line">    <span class="comment">// options related to how webpack emits results</span></div><div class="line"></div><div class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></div><div class="line">    <span class="comment">// the target directory for all output files</span></div><div class="line">    <span class="comment">// must be an absolute path (use the Node.js path module)</span></div><div class="line"></div><div class="line">    filename: <span class="string">"bundle.js"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// the filename template for entry chunks</span></div><div class="line"></div><div class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// the url to the output directory resolved relative to the HTML page</span></div><div class="line"></div><div class="line">    library: <span class="string">"MyLibrary"</span>, <span class="comment">// string,</span></div><div class="line">    <span class="comment">// the name of the exported library</span></div><div class="line"></div><div class="line">    libraryTarget: <span class="string">"umd"</span>, <span class="comment">// universal module definition</span></div><div class="line">    <span class="comment">// the type of the exported library</span></div><div class="line"></div><div class="line">    <span class="comment">/* Advanced output configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="comment">// configuration regarding modules</span></div><div class="line"></div><div class="line">    rules: [</div><div class="line">      <span class="comment">// rules for modules (configure loaders, parser options, etc.)</span></div><div class="line"></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">exclude</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</div><div class="line">        ],</div><div class="line">        <span class="comment">// these are matching conditions, each accepting a regular expression or string</span></div><div class="line">        <span class="comment">// test and include have the same behavior, both must be matched</span></div><div class="line">        <span class="comment">// exclude must not be matched (takes preferrence over test and include)</span></div><div class="line">        <span class="comment">// Best practices:</span></div><div class="line">        <span class="comment">// - Use RegExp only in test and for filename matching</span></div><div class="line">        <span class="comment">// - Use arrays of absolute paths in include and exclude</span></div><div class="line">        <span class="comment">// - Try to avoid exclude and prefer include</span></div><div class="line"></div><div class="line">        issuer: &#123; test, include, exclude &#125;,</div><div class="line">        <span class="comment">// conditions for the issuer (the origin of the import)</span></div><div class="line"></div><div class="line">        enforce: <span class="string">"pre"</span>,</div><div class="line">        <span class="attr">enforce</span>: <span class="string">"post"</span>,</div><div class="line">        <span class="comment">// flags to apply these rules, even if they are overridden (advanced option)</span></div><div class="line"></div><div class="line">        loader: <span class="string">"babel-loader"</span>,</div><div class="line">        <span class="comment">// the loader which should be applied, it'll be resolved relative to the context</span></div><div class="line">        <span class="comment">// -loader suffix is no longer optional in webpack2 for clarity reasons</span></div><div class="line">        <span class="comment">// see webpack 1 upgrade guide</span></div><div class="line"></div><div class="line">        options: &#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">"es2015"</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// options for the loader</span></div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="string">"\.html$"</span>,</div><div class="line"></div><div class="line">        <span class="attr">use</span>: [</div><div class="line">          <span class="comment">// apply multiple loaders and options</span></div><div class="line">          <span class="string">"htmllint-loader"</span>,</div><div class="line">          &#123;</div><div class="line">            <span class="attr">loader</span>: <span class="string">"html-loader"</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">              <span class="comment">/* ... */</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123; <span class="attr">oneOf</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// only use one of these nested rules</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">rules</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// use all of these nested rules (combine with conditions to be useful)</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">and</span>: [ <span class="comment">/* conditions */</span> ] &#125; &#125;,</div><div class="line">      <span class="comment">// matches only if all conditions are matched</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">or</span>: [ <span class="comment">/* conditions */</span> ] &#125; &#125;,</div><div class="line">      &#123; <span class="attr">resource</span>: [ <span class="comment">/* conditions */</span> ] &#125;</div><div class="line">      <span class="comment">// matches if any condition is matched (default for arrays)</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">not</span>: <span class="comment">/* condition */</span> &#125; &#125;</div><div class="line">      <span class="comment">// matches if the condition is not matched</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">/* Advanced module configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="comment">// options for resolving module requests</span></div><div class="line">    <span class="comment">// (does not apply to resolving to loaders)</span></div><div class="line"></div><div class="line">    modules: [</div><div class="line">      <span class="string">"node_modules"</span>,</div><div class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">    ],</div><div class="line">    <span class="comment">// directories where to look for modules</span></div><div class="line"></div><div class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</div><div class="line">    <span class="comment">// extensions that are used</span></div><div class="line"></div><div class="line">    alias: &#123;</div><div class="line">      <span class="comment">// a list of module name aliases</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// alias "module" -&gt; "new-module" and "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"only-module$"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// alias "only-module" -&gt; "new-module", but not "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: path.resolve(__dirname, <span class="string">"app/third/module.js"</span>),</div><div class="line">      <span class="comment">// alias "module" -&gt; "./app/third/module.js" and "module/file" results in error</span></div><div class="line">      <span class="comment">// modules aliases are imported relative to the current context</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/* alternative alias syntax (click to show) */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Advanced resolve configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">performance</span>: &#123;</div><div class="line">    <span class="attr">hints</span>: <span class="string">"warning"</span>, <span class="comment">// enum</span></div><div class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// int (in bytes),</span></div><div class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// int (in bytes)</span></div><div class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123; </div><div class="line">      <span class="comment">// Function predicate that provides asset filenames</span></div><div class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">devtool</span>: <span class="string">"source-map"</span>, <span class="comment">// enum</span></div><div class="line">  <span class="comment">// enhance debugging by adding meta info for the browser devtools</span></div><div class="line">  <span class="comment">// source-map most detailed at the expense of build speed.</span></div><div class="line"></div><div class="line">  context: __dirname, <span class="comment">// string (absolute path!)</span></div><div class="line">  <span class="comment">// the home directory for webpack</span></div><div class="line">  <span class="comment">// the entry and module.rules.loader option</span></div><div class="line">  <span class="comment">//   is resolved relative to this directory</span></div><div class="line"></div><div class="line">  target: <span class="string">"web"</span>, <span class="comment">// enum</span></div><div class="line">  <span class="comment">// the environment in which the bundle should run</span></div><div class="line">  <span class="comment">// changes chunk loading behavior and available modules</span></div><div class="line"></div><div class="line">  externals: [<span class="string">"react"</span>, /^@angular\<span class="comment">//],</span></div><div class="line">  <span class="comment">// Don't follow/bundle these modules, but request them at runtime from the environment</span></div><div class="line"></div><div class="line">  stats: <span class="string">"errors-only"</span>,</div><div class="line">  <span class="comment">// lets you precisely control what bundle information gets displayed</span></div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// proxy URLs to backend development server</span></div><div class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">contentBase</span>: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// boolean | string | array, static file location</span></div><div class="line">    compress: <span class="literal">true</span>, <span class="comment">// enable gzip compression</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// true for index.html upon 404, object for multiple paths</span></div><div class="line">    hot: <span class="literal">true</span>, <span class="comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span></div><div class="line">    https: <span class="literal">false</span>, <span class="comment">// true for self-signed, object for cert authority</span></div><div class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// only errors &amp; warns on hot reload</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// list of additional plugins</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/* Advanced configuration (click to show) */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面我们来创建一个简单的项目<br>我们的项目结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── dist</div><div class="line">├── src</div><div class="line">│   └── entry.js</div><div class="line">├── index.html</div><div class="line">└── webpack.config.js</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>src/entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;hello world&apos;)</div></pre></td></tr></table></figure></p>
<p>webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">	entry: &apos;./src/entry.js&apos;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">		filename: &apos;bundle.js&apos;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在终端下运行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure></p>
<p>使用<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="external">http-server</a>起一个本地服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server -p 8080</div></pre></td></tr></table></figure></p>
<p>可以看到，entry.js的内容被打包到了bundle.js 中<br>这是webpack最简单的应用，下面我们来看看如何使用loader</p>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack2中已经集成了<a href="https://webpack.js.org/guides/migrating/#json-loader-is-not-required-anymore" target="_blank" rel="external">json-loader</a>, 所以我们无需安装其他的依赖<br>在src中增加hello.json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"greet"</span> : <span class="string">"hello from json"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>修改<code>entry.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'./hello.json'</span></div><div class="line"><span class="built_in">document</span>.write(json.greet)</div></pre></td></tr></table></figure></p>
<p>刷新<a href="http://127.0.0.1:8080/" target="_blank" rel="external">http://127.0.0.1:8080/</a><br>可以看到hello.json的结果已经输出到浏览器中</p>
<h4 id="使用其他loader"><a href="#使用其他loader" class="headerlink" title="使用其他loader"></a>使用其他loader</h4><p>如果其他格式的文件，比如css文件我们可以使用相应的loader来解析,安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure></p>
<p>修改<code>webpack.config.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">	entry: &apos;./src/entry.js&apos;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">		filename: &apos;bundle.js&apos;</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [&#123;</div><div class="line">			test: /\.css$/,</div><div class="line">			use: [&quot;style-loader&quot;, &quot;css-loader&quot;]</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &apos;./main.css&apos;</div><div class="line">import json from &apos;./hello.json&apos;</div><div class="line">document.write(json.greet)</div></pre></td></tr></table></figure></p>
<p>可以看到，main.css也经过loader的解析而打包进bundle.js里面了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt;webpack是一个module bundler，可以将把有依赖关系的各种文件打包成一系列的静态资源&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;首先我们安装最新版的webpack, 我安装的版本是2.2.1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g webpack&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面我们将探讨webpack 2 的使用&lt;/p&gt;
&lt;p&gt;我们可以直接在终端中使用webpack，命令如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack &amp;#123;源文件／入口文件&amp;#125; &amp;#123;目标文件&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack --watch //监听模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack -p //混淆脚本&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈javascript的原型及原型链</title>
    <link href="https://derycktse.github.io/2016/03/08/%E6%B5%85%E8%B0%88javascript%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://derycktse.github.io/2016/03/08/浅谈javascript的原型及原型链/</id>
    <published>2016-03-08T14:26:51.000Z</published>
    <updated>2017-03-23T05:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>原型与原型链是javascript里面最最核心的内容，如果不能理解它们之间的存在关系的话，那么我们是不能理解这门语言的。</p>
<p>在JS中，主要有两种创建对象的方法, 分别是对象字面量以及调用构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象字面量</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用构造函数</span></div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>其实上述两种创建对象的方法，本质上是一样的，都是JS引擎调用对象的构造函数来新建出一个对象。构造函数本身也是一个普通的JS函数</p>
<p>下面我们来看一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="comment">//每个构造函数JS引擎都会自动添加一个prototype属性，我们称之为原型，这是一个对象</span></div><div class="line"><span class="comment">//每个由构造函数创建的对象都会共享prototype上面的属性与方法</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype) <span class="comment">// 'object'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//我们为Person.prototype添加sayName方法</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建实例</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Messi'</span>)</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Suarez'</span>)</div><div class="line"></div><div class="line">person1.sayName() <span class="comment">// 'Messi'</span></div><div class="line">person2.sayName() <span class="comment">// 'Suarez'</span></div><div class="line"></div><div class="line">person1.sayName === person2.sayName <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>我们借助上面的例子来理解构造函数-原型-实例，三者之间的关系，主要有几个基本概念</p>
<ul>
<li>构造函数默认会有一个<code>protoype</code>属性指向它的原型</li>
<li><p>构造函数的原型会有一个<code>consctructor</code>的属性指向构造函数本身, 即</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor === Person</div></pre></td></tr></table></figure>
</li>
<li><p>每一个<code>new</code>出来的实例都有一个隐式的<code>__proto__</code>属性，指向它们的构造函数的原型，即</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person1.__proto__ === Person.prototype</div><div class="line">person1.__proto__.constructor === Person</div></pre></td></tr></table></figure>
</li>
</ul>
<p>了解了这些基本概念之后，我们再来看看javascript的一些原生构造函数的关系网，看下列的图</p>
<p><img src="https://i.stack.imgur.com/KFzI3.png" alt="javascript objects treasure map"><br>引自<a href="http://stackoverflow.com/questions/650764/how-does-proto-differ-from-constructor-prototype" target="_blank" rel="external">stackoverflow</a></p>
<p>按照我们上面的理解, Oject本身是一个构造函数，它也是一个对象，那么<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure></p>
<p>为了方便我们记住上图，还有几个需要我们知道的特殊概念：</p>
<ol>
<li><p><code>Function</code>的原型属性与<code>Function</code>的原型指向同一个对象. 即是</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.__proto__ == <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure>
</li>
<li><p><code>Object.prototype.__proto__ === null</code></p>
</li>
<li><code>typeof Function.prototype === &#39;function&#39;</code></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[在JavaScript中，Function构造函数本身也算是Function类型的实例吗？][<a href="https://www.zhihu.com/question/31333084/answer/152086175" target="_blank" rel="external">https://www.zhihu.com/question/31333084/answer/152086175</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型与原型链是javascript里面最最核心的内容，如果不能理解它们之间的存在关系的话，那么我们是不能理解这门语言的。&lt;/p&gt;
&lt;p&gt;在JS中，主要有两种创建对象的方法, 分别是对象字面量以及调用构造函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对象字面量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://derycktse.github.io/tags/javascript/"/>
    
      <category term="prototype" scheme="https://derycktse.github.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>ES2015读书笔记</title>
    <link href="https://derycktse.github.io/2016/02/23/ES2015%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://derycktse.github.io/2016/02/23/ES2015读书笔记/</id>
    <published>2016-02-22T17:12:12.000Z</published>
    <updated>2017-03-23T04:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><ul>
<li>“模式匹配”： 只要等号两边的模式相同，左边的变量久会被赋予相应的值；如果解构不成功，变量的值就等于<code>undefined</code>。 </li>
<li>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</li>
</ul>
<a id="more"></a>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul>
<li><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>]; <span class="comment">//因为x能取到值，所以函数f根本不会执行</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>
</li>
<li>ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于<code>undefined</code>，默认值是不会生效的。 </li>
</ul>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><ul>
<li>数组的元素是按次序排列的，变量的取值由它的位置决定，而对象的属性没有次序，变量必须与属性同名，才能取到正确的值</li>
<li><p>对象的解构赋值的内部机制，是：先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者(注:对象解构赋值只看分号后面的，如果有的话)</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// "aaa"</span></div><div class="line">foo <span class="comment">// error: foo is not defined</span></div><div class="line"><span class="comment">//上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的解构赋值&quot;&gt;&lt;a href=&quot;#变量的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;变量的解构赋值&quot;&gt;&lt;/a&gt;变量的解构赋值&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“模式匹配”： 只要等号两边的模式相同，左边的变量久会被赋予相应的值；如果解构不成功，变量的值就等于&lt;code&gt;undefined&lt;/code&gt;。 &lt;/li&gt;
&lt;li&gt;只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
