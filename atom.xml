<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deryck</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://derycktse.github.io/"/>
  <updated>2017-08-17T06:47:09.000Z</updated>
  <id>https://derycktse.github.io/</id>
  
  <author>
    <name>Deryck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react组件的生命周期</title>
    <link href="https://derycktse.github.io/2017/08/15/react-component-lifecycle/"/>
    <id>https://derycktse.github.io/2017/08/15/react-component-lifecycle/</id>
    <published>2017-08-15T12:18:41.000Z</published>
    <updated>2017-08-17T06:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>react组件生命周期:</p>
<ul>
<li>constructor</li>
<li>componentWillMount</li>
<li>render</li>
<li>ComponentDidMount</li>
<li>componentWillReceiveProps</li>
<li>shouldConponentUpdate</li>
<li>componentWillUpdate</li>
<li>componentDidUpdate</li>
<li>componentWillUnmount</li>
</ul>
<a id="more"></a>
<p>普通的react组件，一般会依次经历一下阶段:</p>
<ol>
<li>constructor</li>
<li>componentWillMount</li>
<li>render</li>
<li>ComponentDidMount</li>
</ol>
<p>当react组件内部state有更新时:</p>
<ol>
<li>shouldConponentUpdate (当shouldConponentUpdate返回值为false的时候，之后的生命周期不会执行)</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ol>
<p>当react组件接收的props值有更新时:</p>
<ol>
<li>componentWillReceiveProps</li>
<li>shouldConponentUpdate (当shouldConponentUpdate返回值为false的时候，之后的生命周期不会执行)</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ol>
<p>删除react组件:</p>
<ol>
<li>componentWillUnmount</li>
</ol>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://facebook.github.io/react/docs/react-component.html" target="_blank" rel="external">React.Component</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react组件生命周期:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;ComponentDidMount&lt;/li&gt;
&lt;li&gt;componentWillReceiveProps&lt;/li&gt;
&lt;li&gt;shouldConponentUpdate&lt;/li&gt;
&lt;li&gt;componentWillUpdate&lt;/li&gt;
&lt;li&gt;componentDidUpdate&lt;/li&gt;
&lt;li&gt;componentWillUnmount&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://derycktse.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>electron使用sqlite</title>
    <link href="https://derycktse.github.io/2017/08/13/use-sqlite-in-electron/"/>
    <id>https://derycktse.github.io/2017/08/13/use-sqlite-in-electron/</id>
    <published>2017-08-13T13:06:55.000Z</published>
    <updated>2017-08-15T15:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在electron使用sqlite3的时候，会出现错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught Error: Cannot find module ‘/…/node_modules/sqlite3/lib/binding/node-v51-darwin-x64/node_sqlite3.node’</div></pre></td></tr></table></figure>
<p>可以使用electron-rebuild解决:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev electron-rebuild</div><div class="line">$ npm install --save sqlite3</div></pre></td></tr></table></figure></p>
<p>在<code>package.json</code>加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;rebuild&quot;: &quot;electron-rebuild -f -w sqlite3&quot;</div></pre></td></tr></table></figure></p>
<p>执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run rebuild</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在electron使用sqlite3的时候，会出现错误:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>package.json中的main,jsnext:main,module分别是干什么用的</title>
    <link href="https://derycktse.github.io/2017/06/30/package-json-main-jsnext-main-module/"/>
    <id>https://derycktse.github.io/2017/06/30/package-json-main-jsnext-main-module/</id>
    <published>2017-06-30T03:16:08.000Z</published>
    <updated>2017-08-15T15:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>我们来看<a href="https://docs.npmjs.com/files/package.json#main" target="_blank" rel="external">npm</a>官方的定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require(&quot;foo&quot;), then your main module&apos;s exports object will be returned.</div><div class="line"></div><div class="line">This should be a module ID relative to the root of your package folder.</div><div class="line"></div><div class="line">For most modules, it makes the most sense to have a main script and often not much else.</div></pre></td></tr></table></figure></p>
<p>简单说<code>main</code>字段定义了我们程序的主要入口，用户在<code>require</code>我们模块的时候，程序会从<code>main</code>字段中找到我们程序的主要入口，从而输出我们的代码依赖.</p>
<p>在这里,<code>main</code>字段用来指向commonjs的模块</p>
<h2 id="jsnext-main-与-module"><a href="#jsnext-main-与-module" class="headerlink" title="jsnext:main 与 module"></a>jsnext:main 与 module</h2><p><code>jsnext:main</code> 与 <code>module</code>的作用是一样的， 但是由于<code>module</code>更直白一点，所以现在使用<code>module</code>. 在这里我们讨论<code>module</code></p>
<p><code>module</code>字段会指向一个ES2015 模块的入口, 当使用<code>rollup</code>这些模块的bundler时，由于使用了ES2015 的模块，可以再做<code>tree shaking</code>优化</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://shuheikagawa.com/blog/2017/01/05/main-jsnext-main-and-module/" target="_blank" rel="external">http://shuheikagawa.com/blog/2017/01/05/main-jsnext-main-and-module/</a><br><a href="https://github.com/jsforum/jsforum/issues/5" target="_blank" rel="external">https://github.com/jsforum/jsforum/issues/5</a><br><a href="https://www.reddit.com/r/javascript/comments/5jwg9c/confused_about_fields_module_and_jsnextmain_in/" target="_blank" rel="external">https://www.reddit.com/r/javascript/comments/5jwg9c/confused_about_fields_module_and_jsnextmain_in/</a><br>rollup wiki</p>
<p><a href="https://github.com/rollup/rollup/wiki/pkg.module" target="_blank" rel="external">https://github.com/rollup/rollup/wiki/pkg.module</a><br><a href="https://github.com/rollup/rollup/wiki/jsnext:main" target="_blank" rel="external">https://github.com/rollup/rollup/wiki/jsnext:main</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;main&quot;&gt;&lt;a href=&quot;#main&quot; class=&quot;headerlink&quot; title=&quot;main&quot;&gt;&lt;/a&gt;main&lt;/h2&gt;&lt;p&gt;我们来看&lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot; t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在webpack中使UglifyPlugin支持IE8</title>
    <link href="https://derycktse.github.io/2017/05/18/webpack-uglify-for-ie8/"/>
    <id>https://derycktse.github.io/2017/05/18/webpack-uglify-for-ie8/</id>
    <published>2017-05-18T15:27:11.000Z</published>
    <updated>2017-08-18T15:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Uglify默认把screw_ie8默认为true，将screw_ie8配置为false:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">compress: &#123;</div><div class="line">        warnings: false,</div><div class="line">        screw_ie8 : false</div><div class="line">    &#125;,</div><div class="line">    mangle: &#123;</div><div class="line">        screw_ie8: false</div><div class="line">    &#125;,</div><div class="line">    output: &#123; screw_ie8: false &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uglify默认把screw_ie8默认为true，将screw_ie8配置为false:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于点击鼠标右键在firefox上面的坑</title>
    <link href="https://derycktse.github.io/2017/05/10/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E5%9C%A8firefox%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9D%91/"/>
    <id>https://derycktse.github.io/2017/05/10/关于点击鼠标右键在firefox上面的坑/</id>
    <published>2017-05-10T07:44:59.000Z</published>
    <updated>2017-05-10T08:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天遇到一个这样的需求:</p>
<p><strong>在浏览器内点击鼠标右键弹出菜单选项</strong></p>
<a id="more"></a>
<p>OK,这样的需求很简单，马上有了思路:</p>
<ol>
<li>写出菜单，默认隐藏</li>
<li>在document上监听<code>contextmenu</code>事件，触发时显示菜单, 并阻止浏览器默认行为(重要，否则会显示浏览器自带的邮件菜单)</li>
<li>监听document的<code>click</code>事件，隐藏菜单</li>
<li>菜单监听自身的<code>click</code>事件，触发菜单自身事件，并阻止冒泡(否则会促发第三步的事件)</li>
</ol>
<p>想法一有，马上啪啪啪写出效果来，自己过了浏览器兼容性，基本OK</p>
<p>但是……</p>
<p>当在firefox上时，却发现一个奇怪的现象，点击右键的时候，菜单闪一下又隐藏了，这就说明第二步跟第三步的事件按序触发了.</p>
<p>说明火狐在右键的时候，click事件也会同时触发，搜索了资料之后，发现这是一个古老的<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=71705" target="_blank" rel="external">bug</a>，到现在都没修好</p>
<p>思考了一下，想到两种方式解决这个问题:</p>
<ul>
<li><code>contextmenu</code>触发后，马上锁定一个信号量，并设置短时间后停止(setTimeout方式解锁)，<code>click</code>事件触发时，当检测到锁定，那就不触发隐藏，如此便能解决，但是有一个问题，这样就没办法再短时间内右键又左键，稍微有点缺陷</li>
<li>第二种方法便是，当<code>contextmenu</code>触发后，记录坐标，<code>click</code>事件触发时，检测坐标，如果一样（可设置偏差），便不触发。</li>
</ul>
<p>最终把问题解决了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天遇到一个这样的需求:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在浏览器内点击鼠标右键弹出菜单选项&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用rollup</title>
    <link href="https://derycktse.github.io/2017/04/30/%E4%BD%BF%E7%94%A8rollup/"/>
    <id>https://derycktse.github.io/2017/04/30/使用rollup/</id>
    <published>2017-04-30T17:32:32.000Z</published>
    <updated>2017-04-30T17:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rollup被誉为下一代ES</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global rollup</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用watch模式"><a href="#使用watch模式" class="headerlink" title="使用watch模式"></a>使用watch模式</h3><p>安装依赖<code>rollup-watch</code>后，便可以愉快地开发啦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install --save-dev rollup-watch</div></pre></td></tr></table></figure></p>
<p>启用模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rollup -w</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rollup被誉为下一代ES&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --global rollup&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue全家桶开发知乎日报</title>
    <link href="https://derycktse.github.io/2017/04/27/%E4%BD%BF%E7%94%A8Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%BC%80%E5%8F%91%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5/"/>
    <id>https://derycktse.github.io/2017/04/27/使用Vue全家桶开发知乎日报/</id>
    <published>2017-04-27T07:41:33.000Z</published>
    <updated>2017-05-05T08:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Vue2 + vue-router + vuex 开发的知乎日报</p>
<p><a href="https://github.com/derycktse/zhihudaily-vue" target="_blank" rel="external">github地址</a>，如果觉得还可以，不妨给个star吧</p>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为经常看知乎日报，萌生了自己撸一个的想法，于是有了这个项目，不过github上面也有很多人做出来了</p>
<a id="more"></a>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>直接使用vue-cli脚手架开撸</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h3><p>使用代理网站 <a href="Images.weserv.nl">Images.weserv.nl</a>代理知乎图片</p>
<h3 id="接口跨域问题"><a href="#接口跨域问题" class="headerlink" title="接口跨域问题"></a>接口跨域问题</h3><p><del>在本地启一个代理服务器(<a href="https://github.com/request/request" target="_blank" rel="external">request</a> )， 从而不会有跨域的问题</del></p>
<p>脚手架中已经集成了<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a>作为代理，使用proxyTable即可代理接口，从而不会有跨域问题，用法见<a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external">Proxy</a></p>
<p>代码结构(使用工具<a href="https://www.npmjs.com/package/treer" target="_blank" rel="external">treer</a>生成):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line">├─App.vue</div><div class="line">├─main.js</div><div class="line">├─store</div><div class="line">|   └store.js</div><div class="line">├─router</div><div class="line">|   └index.js</div><div class="line">├─components</div><div class="line">|     ├─Carousel.vue</div><div class="line">|     ├─List.vue</div><div class="line">|     ├─NewsDetail.vue</div><div class="line">|     └NewsList.vue</div><div class="line">├─common</div><div class="line">|   └util.js</div><div class="line">├─assets</div><div class="line">|   ├─logo.png</div><div class="line">|   ├─top_logo.png</div><div class="line">|   ├─css</div><div class="line">|   |  ├─reset.css</div><div class="line">|   |  └zhihu_base.css</div><div class="line">├─api</div><div class="line">|  └index.js</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎API分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Vue2 + vue-router + vuex 开发的知乎日报&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/derycktse/zhihudaily-vue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;，如果觉得还可以，不妨给个star吧&lt;/p&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;因为经常看知乎日报，萌生了自己撸一个的想法，于是有了这个项目，不过github上面也有很多人做出来了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://derycktse.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>实现拖拽</title>
    <link href="https://derycktse.github.io/2017/04/26/%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/"/>
    <id>https://derycktse.github.io/2017/04/26/实现拖拽/</id>
    <published>2017-04-26T16:17:10.000Z</published>
    <updated>2017-05-16T08:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写一个拖拽效果，其实实现原理比较简单</p>
<p>通过<code>mousedown</code>, <code>mousemove</code>, <code>mouseup</code>加信号量，获取在移动中鼠标的位置clientX, clientY，从而修改元素的相对位置即可。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDraggable</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">	<span class="comment">/*mousedown</span></div><div class="line"><span class="comment">	mousemove</span></div><div class="line"><span class="comment">	mouseup*/</span></div><div class="line">	<span class="keyword">var</span> moveFlag = <span class="literal">false</span></div><div class="line">	on(ele,<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">		moveFlag = <span class="literal">true</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'touch start'</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	&#125;)</div><div class="line">	on(ele,<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'moving'</span>)</div><div class="line">		<span class="keyword">if</span>(!moveFlag) <span class="keyword">return</span> </div><div class="line">			<span class="keyword">var</span> event = e || <span class="built_in">window</span>.event</div><div class="line">		<span class="keyword">var</span> offsetX = e.clientX - <span class="number">50</span></div><div class="line">		, offsetY = e.clientY - <span class="number">50</span></div><div class="line">		</div><div class="line">		ele.style.left = offsetX + <span class="string">'px'</span>,</div><div class="line">		ele.style.top = offsetY + <span class="string">'px'</span></div><div class="line">	</div><div class="line">	&#125;)</div><div class="line">	on(ele,<span class="string">'mouseup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		moveFlag = <span class="literal">false</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'touch end'</span>)</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原本我的代码都是绑定在目标dom上，这个时候会发现当鼠标甩动过快的时候，焦点会在目标dom外，导致这个时候行为看起来很卡</p>
<p>接着修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">on(<span class="built_in">window</span>,<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'moving'</span>)</div><div class="line">		<span class="keyword">if</span>(!moveFlag) <span class="keyword">return</span> </div><div class="line">			<span class="keyword">var</span> event = e || <span class="built_in">window</span>.event</div><div class="line">		<span class="keyword">var</span> offsetX = e.clientX - <span class="number">50</span></div><div class="line">		, offsetY = e.clientY - <span class="number">50</span></div><div class="line">		</div><div class="line">		ele.style.left = offsetX + <span class="string">'px'</span>,</div><div class="line">		ele.style.top = offsetY + <span class="string">'px'</span></div><div class="line">	</div><div class="line">	&#125;)</div></pre></td></tr></table></figure></p>
<p>主流浏览器看起来正常了，却发现IE8移动不了！！！</p>
<p>最终发现应该是<code>mousemove</code>时间并没有冒泡到<code>window</code>对象上, 改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">on(<span class="built_in">document</span>,<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'moving'</span>)</div><div class="line">		<span class="keyword">if</span>(!moveFlag) <span class="keyword">return</span> </div><div class="line">			<span class="keyword">var</span> event = e || <span class="built_in">window</span>.event</div><div class="line">		<span class="keyword">var</span> offsetX = e.clientX - <span class="number">50</span></div><div class="line">		, offsetY = e.clientY - <span class="number">50</span></div><div class="line">		</div><div class="line">		ele.style.left = offsetX + <span class="string">'px'</span>,</div><div class="line">		ele.style.top = offsetY + <span class="string">'px'</span></div><div class="line">	</div><div class="line">	&#125;)</div></pre></td></tr></table></figure></p>
<p>效果终于看起来OK啦<br>见<a href="/code-demo/draggable%20object/index1.html">demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在写一个拖拽效果，其实实现原理比较简单&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;加信号量，获取在移动中鼠标的位置clientX, clientY，从而修改元素的相对位置即可。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>treer:命令行生成目录结构的实用小工具</title>
    <link href="https://derycktse.github.io/2017/04/23/treer/"/>
    <id>https://derycktse.github.io/2017/04/23/treer/</id>
    <published>2017-04-23T11:12:58.000Z</published>
    <updated>2017-08-19T15:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候在写说明文档的时，需要列出文件的一个目录结构,几次手动拼接之后，写了一个cli小工具来自动生成。</p>
<h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install treer -g</div></pre></td></tr></table></figure>
<p>如此我们便可以快速的生成目录结构啦！</p>
<h3 id="生成结果"><a href="#生成结果" class="headerlink" title="生成结果"></a>生成结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ treer</div><div class="line"></div><div class="line">Desktop</div><div class="line">├─.DS_Store</div><div class="line">├─.localized</div><div class="line">├─dir2</div><div class="line">|  ├─file3</div><div class="line">|  └file4</div><div class="line">├─dir1</div><div class="line">|  ├─dile2</div><div class="line">|  └file1</div></pre></td></tr></table></figure>
<h4 id="指定目录"><a href="#指定目录" class="headerlink" title="指定目录"></a>指定目录</h4><p>默认的目录为当前的路径，可以通过<code>-d</code> 传入指定的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ treer -d &lt;指定路径&gt;</div></pre></td></tr></table></figure>
<h4 id="导出结果"><a href="#导出结果" class="headerlink" title="导出结果"></a>导出结果</h4><p>可将结果导出到文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ treer -e &lt;导出路径&gt;</div></pre></td></tr></table></figure>
<h4 id="忽略指定的目录"><a href="#忽略指定的目录" class="headerlink" title="忽略指定的目录"></a>忽略指定的目录</h4><p>有时候我们需要忽略一些文件名，比如我们的<code>node_modules</code>文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ treer -i &lt;&quot;文件名，支持正则表达式/regex/哦&quot;&gt;</div></pre></td></tr></table></figure>
<p>如果觉得实用，不妨<a href="https://github.com/derycktse/treer" target="_blank" rel="external">Star</a>一下吧，<a href="https://github.com/derycktse/treer" target="_blank" rel="external">github地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候在写说明文档的时，需要列出文件的一个目录结构,几次手动拼接之后，写了一个cli小工具来自动生成。&lt;/p&gt;
&lt;h3 id=&quot;安装方法：&quot;&gt;&lt;a href=&quot;#安装方法：&quot; class=&quot;headerlink&quot; title=&quot;安装方法：&quot;&gt;&lt;/a&gt;安装方法：&lt;/h3&gt;&lt;f
    
    </summary>
    
    
      <category term="node.js" scheme="https://derycktse.github.io/tags/node-js/"/>
    
      <category term="npm" scheme="https://derycktse.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>javascript深浅拷贝</title>
    <link href="https://derycktse.github.io/2016/05/05/javascript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://derycktse.github.io/2016/05/05/javascript深浅拷贝/</id>
    <published>2016-05-05T11:47:09.000Z</published>
    <updated>2017-05-15T14:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>javascript中分为基本类型跟引用类型两种，对于引用类型来说，变量实际上储存的是指针，对于变量的赋值，实际上也是复制指针地址，赋值后，我们对于变量的修改，也同样会影响到原来的变量</p>
<p>例如下面例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125; ;  </div><div class="line"><span class="keyword">var</span> copy = object ;  </div><div class="line">object.a = <span class="number">3</span> ;  </div><div class="line"><span class="built_in">console</span>.log( copy.a ) ;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>遍历对象的属性，将属性赋值给新创建的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">source</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cloneObj = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> source)&#123;</div><div class="line">        cloneObj[key] = source[key]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cloneObj</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是很简单，不过，上面的代码有几个问题:</p>
<ul>
<li>克隆出来的对象跟原本的对象原型链是不同的</li>
<li>原本原型链上的属性，被克隆到了新对象上作为自有属性了</li>
<li>只有可被枚举(<code>emuerable</code>)的属性被克隆了</li>
<li>属性的<code>descriptor</code>并没有被克隆，比如原本为只读的访问属性，被克隆成可读写的属性了</li>
<li>浅拷贝最重要的一个问题，如果属性本身是一个对象，那么克隆的对象以及原本的对象将共享这个属性</li>
</ul>
<p>为了完善上面的问题，我们可以使用<code>Object.getOwnPropertyNames()</code>来配合完善, <code>Object.keys</code>只能返回可枚举的属性</p>
<p>我们来分析上面几个缺陷:</p>
<p><strong>克隆出来的对象跟原本的对象原型链是不同的</strong></p>
<p>我们可以通过获取原对象的原型对象(<code>Object.getPrototypeOf</code>)，再将克隆对象继承与该原型对象(<code>Object.create</code>)</p>
<p><strong>原本原型链上的属性，被克隆到了新对象上作为自有属性了</strong></p>
<p><strong>只有可被枚举(<code>emuerable</code>)的属性被克隆了</strong></p>
<p>在复制过程中，我们可以先判断属性是否为自由属性(<code>Object.prototype.hasOwnProperty</code>)，当然，我们可以更简单的使用<code>Object.getOwnPropertyNames</code>，它可返回所有的自有属性（包括不可枚举的）</p>
<p><strong>属性的<code>descriptor</code>并没有被克隆，比如原本为只读的访问属性，被克隆成可读写的属性了</strong><br><br>通过<code>Object.getOwnPropertyDescriptor</code>获取属性的descriptor之后使用<code>Object.defineProperty</code>定义到克隆对象中</p>
<p>我们看下面的改良版<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">source</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cloneObj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(source))</div><div class="line"></div><div class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(source) <span class="comment">// `Object.keys`只能返回可枚举的属性</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length ; i ++)&#123;</div><div class="line">        <span class="built_in">Object</span>.defineProperty(cloneObj, keys[i], </div><div class="line">            <span class="built_in">Object</span>.getOwnPropetyDescriptor(source, keys[i]))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cloneObj</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>上面已经讲诉了浅拷贝，浅拷贝只克隆对象的第一层属性，而对于再深层的属性来说，只是复制，并不是克隆，所以深层的属性如果是对象的话，还是指着相同的对象</p>
<p>深拷也很简单，一个思想： 递归</p>
<p>当属性为对象时，利用浅拷贝的思想进行递归调用，即是深拷贝</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">source</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cloneObj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(source))</div><div class="line"></div><div class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(source)</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, length = keys.length ; i &lt; length; i++)&#123;</div><div class="line">        <span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, keys[i])</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(descriptor.value &amp;&amp; <span class="keyword">typeof</span> descriptor.value === <span class="string">'object'</span>)&#123;<span class="comment">//如果属性是访问属性（getter/setter）的话，这里的descriptor.value === 'undefined'</span></div><div class="line">            descriptor.value = deepCopy(descriptor.value)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">         <span class="built_in">Object</span>.defineProperty( cloneObj , keys[ i ] , descriptor ) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cloneObj</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，上面这个深拷贝完成了，但是还是有这几个问题:</p>
<ul>
<li>循环指向的属性会使得内存泄漏</li>
<li>如果对象的方法引用到闭包中的变量，则无法克隆</li>
</ul>
<h4 id="循环指向"><a href="#循环指向" class="headerlink" title="循环指向"></a>循环指向</h4><p>看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    a : <span class="string">'a'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">o.loop = o</div></pre></td></tr></table></figure></p>
<p>如果调用上述的<code>deepCopy</code>，则我们会陷入到o.loop.loop.loop.loop.loop.loop…这样的循环中去</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>我们看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myConstructor</span>(<span class="params"></span>)  </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> myPrivateVar = <span class="string">'secret'</span> ;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        myPublicVar: <span class="string">'public!'</span> ,</div><div class="line">        getMyPrivateVar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> myPrivateVar ;</div><div class="line">        &#125; ,</div><div class="line">        setMyPrivateVar( value ) &#123;</div><div class="line">            myPrivateVar = value.toString() ;</div><div class="line">        &#125;</div><div class="line">    &#125; ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = myContructor() ;  </div><div class="line"><span class="keyword">var</span> cloneObj = deepCopy(o)</div></pre></td></tr></table></figure></p>
<p>上面的例子我们可以看到，对象o中的方法<code>getMyPrivateVar</code>与<code>setMyPrivateVar</code>均访问到了闭包变量<code>myPrivateVar</code>，这里通过o对<code>myPrivateVar</code>的修改，cloneObj的<code>myPrivateVar</code>同样会受影响, 因为私有变量是没办法</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.soulserv.net/understanding-object-cloning-in-javascript-part-i/" target="_blank" rel="external">understanding-object-cloning-in-javascript-part-i</a><br><a href="http://blog.soulserv.net/understanding-object-cloning-in-javascript-part-ii/" target="_blank" rel="external">Understanding Object Cloning in Javascript - Part. II</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript中分为基本类型跟引用类型两种，对于引用类型来说，变量实际上储存的是指针，对于变量的赋值，实际上也是复制指针地址，赋值后，我们对于变量的修改，也同样会影响到原来的变量&lt;/p&gt;
&lt;p&gt;例如下面例子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; object = &amp;#123; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125; ;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = object ;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object.a = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( copy.a ) ;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://derycktse.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>三个关于数组的小技巧</title>
    <link href="https://derycktse.github.io/2016/04/14/%E4%B8%89%E4%B8%AA%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://derycktse.github.io/2016/04/14/三个关于数组的小技巧/</id>
    <published>2016-04-14T02:36:07.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-可迭代的空数组"><a href="#1-可迭代的空数组" class="headerlink" title="1.可迭代的空数组"></a>1.可迭代的空数组</h3><p>我们知道，Javacript的所创建的数组如果未被初始化值的话，它是一个稀疏数组(sparse array)，这是什么意思的？我们先看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">//[undefined, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure></p>
<p>假设我们要去迭代一个数组，我们会发现，未被初始化值的数组，index实际上访问不到的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index); <span class="comment">//  输出:[undefined, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<p>我们分别来看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description" target="_blank" rel="external">Array.prototype.forEach</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description" target="_blank" rel="external">Array.prototype.map</a>的描述，可以留意到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values, including undefined. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forEach() executes the provided callback once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</div></pre></td></tr></table></figure>
<p>对于<code>forEach</code>与<code>map</code>这类方法，如果数组有未被初始化值的index, 默认是不回被遍历的。</p>
<p>那么， 如何创建一个所有值默认可被遍历的数组呢？很简单，我们只需要多加一步操作:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)); <span class="comment">//借助apply给每一个数组的每一个index都赋值</span></div><div class="line">arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index); <span class="comment">//这样的话改数组就可以遍历了, 输出 [0, 1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="2-利用数组给方法传递空参数"><a href="#2-利用数组给方法传递空参数" class="headerlink" title="2.利用数组给方法传递空参数"></a>2.利用数组给方法传递空参数</h3><p>我们调用方法的时候，有时想对一些参数进行忽略，比如下面的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">'parameter1'</span>, , <span class="string">'parameter3'</span>); <span class="comment">//会报错， Uncaught SyntaxError: Unexpected token ,</span></div></pre></td></tr></table></figure></p>
<p>这个时候通常我们的做法是会传一个<code>null</code> 或者 <code>undefined</code> 作为占位<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">method(<span class="string">'parameter1'</span>, <span class="literal">null</span>, <span class="string">'parameter3'</span>)</div><div class="line"><span class="comment">//或者</span></div><div class="line">method(<span class="string">'paramter1'</span>, <span class="literal">undefined</span>, <span class="string">'parameter3'</span>);</div></pre></td></tr></table></figure></p>
<p>我们可以借助ES6的展开语法(…)来辅助传参<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(...[&apos;parameter1&apos;, , &apos;paramter3&apos;]); // 大功告成!</div></pre></td></tr></table></figure></p>
<h3 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3. 数组去重"></a>3. 数组去重</h3><p>使用展开符号搭配<code>set</code>进行数组去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const arr = [...new Set([1, 2, 3, 3])];//[1, 2, 3]</div></pre></td></tr></table></figure></p>
<p>参考来源:<br> <a href="http://www.jstips.co/en/javascript/3-array-hacks/" target="_blank" rel="external">3 Array Hacks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-可迭代的空数组&quot;&gt;&lt;a href=&quot;#1-可迭代的空数组&quot; class=&quot;headerlink&quot; title=&quot;1.可迭代的空数组&quot;&gt;&lt;/a&gt;1.可迭代的空数组&lt;/h3&gt;&lt;p&gt;我们知道，Javacript的所创建的数组如果未被初始化值的话，它是一个稀疏数组(sparse array)，这是什么意思的？我们先看下面的代码&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[undefined, undefined, undefined, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设我们要去迭代一个数组，我们会发现，未被初始化值的数组，index实际上访问不到的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;arr.map(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;elem, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; index); &lt;span class=&quot;comment&quot;&gt;//  输出:[undefined, undefined, undefined, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://derycktse.github.io/tags/javascript/"/>
    
      <category term="es2015" scheme="https://derycktse.github.io/tags/es2015/"/>
    
  </entry>
  
  <entry>
    <title>vue源码学习笔记</title>
    <link href="https://derycktse.github.io/2016/04/05/vue%E6%BA%90%E7%A0%81/"/>
    <id>https://derycktse.github.io/2016/04/05/vue源码/</id>
    <published>2016-04-05T06:48:30.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="83fac017f96f34c92c3578796a7ddb443d4e1f17"><a href="#83fac017f96f34c92c3578796a7ddb443d4e1f17" class="headerlink" title="[83fac017f96f34c92c3578796a7ddb443d4e1f17]"></a>[83fac017f96f34c92c3578796a7ddb443d4e1f17]</h3><p>使用grunt作为构建工具<br>npm + component作为包的管理</p>
<h3 id="871ed9126639c9128c18bb2f19e6afd42c0c5ad9"><a href="#871ed9126639c9128c18bb2f19e6afd42c0c5ad9" class="headerlink" title="[871ed9126639c9128c18bb2f19e6afd42c0c5ad9]"></a>[871ed9126639c9128c18bb2f19e6afd42c0c5ad9]</h3><p>新增加了一个数据绑定的实例<br>大致思路：</p>
<ul>
<li>html结构中新增占位符号</li>
<li>将有占位符号的DOM保存起来，同时拥有一个对象将DOM关联起来</li>
<li>使用Object.defineProperty为这个对象的属性进行绑定访问器，如果修改了这个访问器的话，也将更改更新到DOM中 </li>
</ul>
<p><a href="https://github.com/vuejs/vue/blob/871ed9126639c9128c18bb2f19e6afd42c0c5ad9/explorations%2Fgetset.html" target="_blank" rel="external">实例地址</a></p>
<h3 id="a5e27b1174e9196dcc9dbb0becc487275ea2e84c"><a href="#a5e27b1174e9196dcc9dbb0becc487275ea2e84c" class="headerlink" title="[a5e27b1174e9196dcc9dbb0becc487275ea2e84c]"></a>[a5e27b1174e9196dcc9dbb0becc487275ea2e84c]</h3><p>作者同时使用了compoent的包管理工具<br>看提交时间必须使用component@0.16.3这个版本</p>
<p>修改了main.js，主要思想即是通过解析拥有指定属性的DOM，然后将它们存入到对象之中，为这个对象绑定访问选择器（set,get）从而将更新修改到DOM中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;83fac017f96f34c92c3578796a7ddb443d4e1f17&quot;&gt;&lt;a href=&quot;#83fac017f96f34c92c3578796a7ddb443d4e1f17&quot; class=&quot;headerlink&quot; title=&quot;[83fac017f96
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack使用require.ensure进行代码分割</title>
    <link href="https://derycktse.github.io/2016/03/15/webpack%E4%BD%BF%E7%94%A8require-ensure%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
    <id>https://derycktse.github.io/2016/03/15/webpack使用require-ensure进行代码分割/</id>
    <published>2016-03-15T20:52:13.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><p>实例来自于<a href="https://webpack.js.org/guides/code-splitting-require/" target="_blank" rel="external">webpack</a><br>假定我们有下面的项目结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── dist</div><div class="line">├── js</div><div class="line">│   ├── a.js</div><div class="line">│   ├── b.js</div><div class="line">│   ├── c.js</div><div class="line">│   └── entry.js</div><div class="line">└── webpack.config.js</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>文件内容<br>entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require(&apos;./a&apos;);</div><div class="line">require.ensure([&apos;./b&apos;], function(require)&#123;</div><div class="line">    require(&apos;./c&apos;);</div><div class="line">    console.log(&apos;done!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>a.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM a *****&apos;);</div></pre></td></tr></table></figure></p>
<p>b.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM b *****&apos;);</div></pre></td></tr></table></figure></p>
<p>c.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;***** I AM c *****&apos;);</div></pre></td></tr></table></figure></p>
<p>下面我们看一下<code>webpack.config.js</code>的配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports =  &#123;</div><div class="line">		entry : <span class="string">'./js/entry.js'</span></div><div class="line">		,</div><div class="line">		output : &#123;</div><div class="line">			filename : <span class="string">'bundle.js'</span></div><div class="line">			, <span class="attr">path</span> : path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">			, <span class="attr">publicPath</span>: <span class="string">'./dist/'</span> <span class="comment">//当使用代码分割时，publicPath很重要，它将告诉webpack从哪儿去加载其他打包的文件</span></div><div class="line">			, <span class="attr">pathinfo</span> : <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>执行webpack打包之后，我们可以看到结果<br><img src="https://segmentfault.com/img/bVJS9m?w=1352&amp;h=528" alt="执行webpack打包"></p>
<p>我们发现，webpack打包生成了<code>bundle.js</code>以及<code>1.bundle.js</code>两个文件<br>查看文件的内容，我们可以发现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bundle.js</span></div><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">/*</span></div><div class="line"><span class="comment">				webpack 集成的代码，这里略</span></div><div class="line"><span class="comment">			*/</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">"./dist/"</span>; <span class="comment">//按需加载的路径</span></div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/*!*********************!*\</span></div><div class="line"><span class="comment">  !*** ./js/entry.js ***!</span></div><div class="line"><span class="comment">  \*********************/</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"></div><div class="line">	__webpack_require__(<span class="comment">/*! ./a */</span> <span class="number">1</span>)</div><div class="line"></div><div class="line">	__webpack_require__.e<span class="comment">/* nsure */</span>(<span class="number">1</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">		__webpack_require__(<span class="comment">/*! ./c */</span> <span class="number">3</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'done!'</span>)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line"><span class="comment">  !*** ./js/a.js ***!</span></div><div class="line"><span class="comment">  \*****************/</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am a'</span>)</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/******/</span> ]);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.bundle.js</span></div><div class="line">webpackJsonp([<span class="number">1</span>],[</div><div class="line"><span class="comment">/* 0 */</span>,</div><div class="line"><span class="comment">/* 1 */</span>,</div><div class="line"><span class="comment">/* 2 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line"><span class="comment">  !*** ./js/b.js ***!</span></div><div class="line"><span class="comment">  \*****************/</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am b'</span>)</div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 3 */</span></div><div class="line"><span class="comment">/*!*****************!*\</span></div><div class="line"><span class="comment">  !*** ./js/c.js ***!</span></div><div class="line"><span class="comment">  \*****************/</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'I am c'</span>)</div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
<p><code>a.js</code>的内容被打包到bundle.js之中,而<code>b.js</code>,<code>c.js</code>则位于<code>1.bundle.js</code>中,<code>b.js</code>,<code>c.js</code>从主入口文件中分离了出来，而且只有<code>c.js</code>的内容被执行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码分割&quot;&gt;&lt;a href=&quot;#代码分割&quot; class=&quot;headerlink&quot; title=&quot;代码分割&quot;&gt;&lt;/a&gt;代码分割&lt;/h2&gt;&lt;p&gt;实例来自于&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-require/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt;&lt;br&gt;假定我们有下面的项目结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── a.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── b.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── c.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── entry.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── webpack.config.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>为gulp任务传递参数</title>
    <link href="https://derycktse.github.io/2016/03/14/%E4%B8%BAgulp%E4%BB%BB%E5%8A%A1%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>https://derycktse.github.io/2016/03/14/为gulp任务传递参数/</id>
    <published>2016-03-14T16:26:36.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在web前端的脚手架中，有相当一部分数量的人选择用gulp做为首选的构建工具，但是，我们是没办法向gulp的任务直接传递命令行参数的。<br>我们知道gulp实际上是运行在nodejs中的，那么，我们是可以访问<code>process.argv</code><br>比如命令<code>gulp task1 --a 123 --b &quot;my string&quot; --c</code>, 我们看看<code>process.argv</code>会输出什么<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"><span class="string">'/usr/bin/nodejs'</span>,</div><div class="line"><span class="string">'/home/user/.node_modules_global/bin/gulp'</span>,</div><div class="line"><span class="string">'task1'</span>,</div><div class="line"><span class="string">'--a'</span>,</div><div class="line"><span class="string">'123'</span>,</div><div class="line"><span class="string">'--b'</span>,</div><div class="line"><span class="string">'my string'</span>,</div><div class="line"><span class="string">'--c'</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>既然可以拿到命令行输入的东西，那么我们就可以自己写一个参数解析的函数啦!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fetch command line arguments</span></div><div class="line"><span class="keyword">const</span> arg = (<span class="function"><span class="params">argList</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> arg = &#123;&#125;, a, opt, thisOpt, curOpt;</div><div class="line">  <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; argList.length; a++) &#123;</div><div class="line"></div><div class="line">    thisOpt = argList[a].trim();</div><div class="line">    opt = thisOpt.replace(<span class="regexp">/^\-+/</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (opt === thisOpt) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// argument value</span></div><div class="line">      <span class="keyword">if</span> (curOpt) arg[curOpt] = opt;</div><div class="line">      curOpt = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="comment">// argument name</span></div><div class="line">      curOpt = opt;</div><div class="line">      arg[curOpt] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line"></div><div class="line">&#125;)(process.argv);</div><div class="line"><span class="built_in">console</span>.log(arg) <span class="comment">//&#123; a: '123', b: 'my string', c: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>搞定！</p>
<p>当然，这只是一个简单的实现。<br>我们还可以使用功能更强大的库, 比如TJ大神的<a href="https://github.com/tj/commander" target="_blank" rel="external">commander</a></p>
<p>参考<br><a href="https://www.sitepoint.com/pass-parameters-gulp-tasks/" target="_blank" rel="external">How to Pass Command Line Parameters to Gulp Tasks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在web前端的脚手架中，有相当一部分数量的人选择用gulp做为首选的构建工具，但是，我们是没办法向gulp的任务直接传递命令行参数的。&lt;br&gt;我们知道gulp实际上是运行在nodejs中的，那么，我们是可以访问&lt;code&gt;process.argv&lt;/code&gt;&lt;br&gt;比如命令&lt;code&gt;gulp task1 --a 123 --b &amp;quot;my string&amp;quot; --c&lt;/code&gt;, 我们看看&lt;code&gt;process.argv&lt;/code&gt;会输出什么&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;/usr/bin/nodejs&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;/home/user/.node_modules_global/bin/gulp&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;task1&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--a&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--b&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;my string&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;--c&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门</title>
    <link href="https://derycktse.github.io/2016/03/10/webpack%E5%85%A5%E9%97%A8/"/>
    <id>https://derycktse.github.io/2016/03/10/webpack入门/</id>
    <published>2016-03-10T14:34:59.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>webpack是一个module bundler，可以将把有依赖关系的各种文件打包成一系列的静态资源</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先我们安装最新版的webpack, 我安装的版本是2.2.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure></p>
<p>下面我们将探讨webpack 2 的使用</p>
<p>我们可以直接在终端中使用webpack，命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">webpack &#123;源文件／入口文件&#125; &#123;目标文件&#125;</div><div class="line">webpack --watch //监听模式</div><div class="line">webpack -p //混淆脚本</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>考虑到随着我们项目复杂度的增高，有可能我们的配置选项也会很多，所以，我们完全可以将配置放到文件中, webpack在执行的时候默认会加载webpack.config.js文件作为配置, 如果我们需要指定配置文件的话，方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --config &#123;配置文件&#125;</div></pre></td></tr></table></figure></p>
<p>我们来看下webpack都有哪些配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// click on the name of the option to get to the detailed documentation</span></div><div class="line">  <span class="comment">// click on the items with arrows to show more examples / advanced options</span></div><div class="line"></div><div class="line">  entry: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></div><div class="line">  <span class="comment">// Here the application starts executing</span></div><div class="line">  <span class="comment">// and webpack starts bundling</span></div><div class="line"></div><div class="line">  output: &#123;</div><div class="line">    <span class="comment">// options related to how webpack emits results</span></div><div class="line"></div><div class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></div><div class="line">    <span class="comment">// the target directory for all output files</span></div><div class="line">    <span class="comment">// must be an absolute path (use the Node.js path module)</span></div><div class="line"></div><div class="line">    filename: <span class="string">"bundle.js"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// the filename template for entry chunks</span></div><div class="line"></div><div class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></div><div class="line">    <span class="comment">// the url to the output directory resolved relative to the HTML page</span></div><div class="line"></div><div class="line">    library: <span class="string">"MyLibrary"</span>, <span class="comment">// string,</span></div><div class="line">    <span class="comment">// the name of the exported library</span></div><div class="line"></div><div class="line">    libraryTarget: <span class="string">"umd"</span>, <span class="comment">// universal module definition</span></div><div class="line">    <span class="comment">// the type of the exported library</span></div><div class="line"></div><div class="line">    <span class="comment">/* Advanced output configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    <span class="comment">// configuration regarding modules</span></div><div class="line"></div><div class="line">    rules: [</div><div class="line">      <span class="comment">// rules for modules (configure loaders, parser options, etc.)</span></div><div class="line"></div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        include: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">        ],</div><div class="line">        exclude: [</div><div class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</div><div class="line">        ],</div><div class="line">        <span class="comment">// these are matching conditions, each accepting a regular expression or string</span></div><div class="line">        <span class="comment">// test and include have the same behavior, both must be matched</span></div><div class="line">        <span class="comment">// exclude must not be matched (takes preferrence over test and include)</span></div><div class="line">        <span class="comment">// Best practices:</span></div><div class="line">        <span class="comment">// - Use RegExp only in test and for filename matching</span></div><div class="line">        <span class="comment">// - Use arrays of absolute paths in include and exclude</span></div><div class="line">        <span class="comment">// - Try to avoid exclude and prefer include</span></div><div class="line"></div><div class="line">        issuer: &#123; test, include, exclude &#125;,</div><div class="line">        <span class="comment">// conditions for the issuer (the origin of the import)</span></div><div class="line"></div><div class="line">        enforce: <span class="string">"pre"</span>,</div><div class="line">        enforce: <span class="string">"post"</span>,</div><div class="line">        <span class="comment">// flags to apply these rules, even if they are overridden (advanced option)</span></div><div class="line"></div><div class="line">        loader: <span class="string">"babel-loader"</span>,</div><div class="line">        <span class="comment">// the loader which should be applied, it'll be resolved relative to the context</span></div><div class="line">        <span class="comment">// -loader suffix is no longer optional in webpack2 for clarity reasons</span></div><div class="line">        <span class="comment">// see webpack 1 upgrade guide</span></div><div class="line"></div><div class="line">        options: &#123;</div><div class="line">          presets: [<span class="string">"es2015"</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// options for the loader</span></div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123;</div><div class="line">        test: <span class="string">"\.html$"</span>,</div><div class="line"></div><div class="line">        use: [</div><div class="line">          <span class="comment">// apply multiple loaders and options</span></div><div class="line">          <span class="string">"htmllint-loader"</span>,</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">"html-loader"</span>,</div><div class="line">            options: &#123;</div><div class="line">              <span class="comment">/* ... */</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      &#123; <span class="attr">oneOf</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// only use one of these nested rules</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">rules</span>: [ <span class="comment">/* rules */</span> ] &#125;,</div><div class="line">      <span class="comment">// use all of these nested rules (combine with conditions to be useful)</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">and</span>: [ <span class="comment">/* conditions */</span> ] &#125; &#125;,</div><div class="line">      <span class="comment">// matches only if all conditions are matched</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">or</span>: [ <span class="comment">/* conditions */</span> ] &#125; &#125;,</div><div class="line">      &#123; <span class="attr">resource</span>: [ <span class="comment">/* conditions */</span> ] &#125;</div><div class="line">      <span class="comment">// matches if any condition is matched (default for arrays)</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">resource</span>: &#123; <span class="attr">not</span>: <span class="comment">/* condition */</span> &#125; &#125;</div><div class="line">      <span class="comment">// matches if the condition is not matched</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">/* Advanced module configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  resolve: &#123;</div><div class="line">    <span class="comment">// options for resolving module requests</span></div><div class="line">    <span class="comment">// (does not apply to resolving to loaders)</span></div><div class="line"></div><div class="line">    modules: [</div><div class="line">      <span class="string">"node_modules"</span>,</div><div class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</div><div class="line">    ],</div><div class="line">    <span class="comment">// directories where to look for modules</span></div><div class="line"></div><div class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</div><div class="line">    <span class="comment">// extensions that are used</span></div><div class="line"></div><div class="line">    alias: &#123;</div><div class="line">      <span class="comment">// a list of module name aliases</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// alias "module" -&gt; "new-module" and "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"only-module$"</span>: <span class="string">"new-module"</span>,</div><div class="line">      <span class="comment">// alias "only-module" -&gt; "new-module", but not "module/path/file" -&gt; "new-module/path/file"</span></div><div class="line"></div><div class="line">      <span class="string">"module"</span>: path.resolve(__dirname, <span class="string">"app/third/module.js"</span>),</div><div class="line">      <span class="comment">// alias "module" -&gt; "./app/third/module.js" and "module/file" results in error</span></div><div class="line">      <span class="comment">// modules aliases are imported relative to the current context</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/* alternative alias syntax (click to show) */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Advanced resolve configuration (click to show) */</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  performance: &#123;</div><div class="line">    hints: <span class="string">"warning"</span>, <span class="comment">// enum</span></div><div class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// int (in bytes),</span></div><div class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// int (in bytes)</span></div><div class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123; </div><div class="line">      <span class="comment">// Function predicate that provides asset filenames</span></div><div class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devtool: <span class="string">"source-map"</span>, <span class="comment">// enum</span></div><div class="line">  <span class="comment">// enhance debugging by adding meta info for the browser devtools</span></div><div class="line">  <span class="comment">// source-map most detailed at the expense of build speed.</span></div><div class="line"></div><div class="line">  context: __dirname, <span class="comment">// string (absolute path!)</span></div><div class="line">  <span class="comment">// the home directory for webpack</span></div><div class="line">  <span class="comment">// the entry and module.rules.loader option</span></div><div class="line">  <span class="comment">//   is resolved relative to this directory</span></div><div class="line"></div><div class="line">  target: <span class="string">"web"</span>, <span class="comment">// enum</span></div><div class="line">  <span class="comment">// the environment in which the bundle should run</span></div><div class="line">  <span class="comment">// changes chunk loading behavior and available modules</span></div><div class="line"></div><div class="line">  externals: [<span class="string">"react"</span>, /^@angular\<span class="comment">//],</span></div><div class="line">  <span class="comment">// Don't follow/bundle these modules, but request them at runtime from the environment</span></div><div class="line"></div><div class="line">  stats: <span class="string">"errors-only"</span>,</div><div class="line">  <span class="comment">// lets you precisely control what bundle information gets displayed</span></div><div class="line"></div><div class="line">  devServer: &#123;</div><div class="line">    proxy: &#123; <span class="comment">// proxy URLs to backend development server</span></div><div class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></div><div class="line">    &#125;,</div><div class="line">    contentBase: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// boolean | string | array, static file location</span></div><div class="line">    compress: <span class="literal">true</span>, <span class="comment">// enable gzip compression</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// true for index.html upon 404, object for multiple paths</span></div><div class="line">    hot: <span class="literal">true</span>, <span class="comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span></div><div class="line">    https: <span class="literal">false</span>, <span class="comment">// true for self-signed, object for cert authority</span></div><div class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// only errors &amp; warns on hot reload</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// list of additional plugins</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/* Advanced configuration (click to show) */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面我们来创建一个简单的项目<br>我们的项目结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── dist</div><div class="line">├── src</div><div class="line">│   └── entry.js</div><div class="line">├── index.html</div><div class="line">└── webpack.config.js</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>src/entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;hello world&apos;)</div></pre></td></tr></table></figure></p>
<p>webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">	entry: &apos;./src/entry.js&apos;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">		filename: &apos;bundle.js&apos;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在终端下运行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure></p>
<p>使用<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="external">http-server</a>起一个本地服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http-server -p 8080</div></pre></td></tr></table></figure></p>
<p>可以看到，entry.js的内容被打包到了bundle.js 中<br>这是webpack最简单的应用，下面我们来看看如何使用loader</p>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack2中已经集成了<a href="https://webpack.js.org/guides/migrating/#json-loader-is-not-required-anymore" target="_blank" rel="external">json-loader</a>, 所以我们无需安装其他的依赖<br>在src中增加hello.json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"greet"</span> : <span class="string">"hello from json"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>修改<code>entry.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'./hello.json'</span></div><div class="line"><span class="built_in">document</span>.write(json.greet)</div></pre></td></tr></table></figure></p>
<p>刷新<a href="http://127.0.0.1:8080/" target="_blank" rel="external">http://127.0.0.1:8080/</a><br>可以看到hello.json的结果已经输出到浏览器中</p>
<h4 id="使用其他loader"><a href="#使用其他loader" class="headerlink" title="使用其他loader"></a>使用其他loader</h4><p>如果其他格式的文件，比如css文件我们可以使用相应的loader来解析,安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure></p>
<p>修改<code>webpack.config.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">	entry: &apos;./src/entry.js&apos;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">		filename: &apos;bundle.js&apos;</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [&#123;</div><div class="line">			test: /\.css$/,</div><div class="line">			use: [&quot;style-loader&quot;, &quot;css-loader&quot;]</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &apos;./main.css&apos;</div><div class="line">import json from &apos;./hello.json&apos;</div><div class="line">document.write(json.greet)</div></pre></td></tr></table></figure></p>
<p>可以看到，main.css也经过loader的解析而打包进bundle.js里面了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt;webpack是一个module bundler，可以将把有依赖关系的各种文件打包成一系列的静态资源&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;首先我们安装最新版的webpack, 我安装的版本是2.2.1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g webpack&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面我们将探讨webpack 2 的使用&lt;/p&gt;
&lt;p&gt;我们可以直接在终端中使用webpack，命令如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack &amp;#123;源文件／入口文件&amp;#125; &amp;#123;目标文件&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack --watch //监听模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack -p //混淆脚本&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈javascript的原型及原型链</title>
    <link href="https://derycktse.github.io/2016/03/08/%E6%B5%85%E8%B0%88javascript%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://derycktse.github.io/2016/03/08/浅谈javascript的原型及原型链/</id>
    <published>2016-03-08T14:26:51.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>原型与原型链是javascript里面最最核心的内容，如果不能理解它们之间的存在关系的话，那么我们是不能理解这门语言的。</p>
<p>在JS中，主要有两种创建对象的方法, 分别是对象字面量以及调用构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象字面量</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用构造函数</span></div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>其实上述两种创建对象的方法，本质上是一样的，都是JS引擎调用对象的构造函数来新建出一个对象。构造函数本身也是一个普通的JS函数</p>
<p>下面我们来看一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="comment">//每个构造函数JS引擎都会自动添加一个prototype属性，我们称之为原型，这是一个对象</span></div><div class="line"><span class="comment">//每个由构造函数创建的对象都会共享prototype上面的属性与方法</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype) <span class="comment">// 'object'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//我们为Person.prototype添加sayName方法</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建实例</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Messi'</span>)</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Suarez'</span>)</div><div class="line"></div><div class="line">person1.sayName() <span class="comment">// 'Messi'</span></div><div class="line">person2.sayName() <span class="comment">// 'Suarez'</span></div><div class="line"></div><div class="line">person1.sayName === person2.sayName <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>我们借助上面的例子来理解构造函数-原型-实例，三者之间的关系，主要有几个基本概念</p>
<ul>
<li>构造函数默认会有一个<code>protoype</code>属性指向它的原型</li>
<li><p>构造函数的原型会有一个<code>consctructor</code>的属性指向构造函数本身, 即</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor === Person</div></pre></td></tr></table></figure>
</li>
<li><p>每一个<code>new</code>出来的实例都有一个隐式的<code>__proto__</code>属性，指向它们的构造函数的原型，即</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person1.__proto__ === Person.prototype</div><div class="line">person1.__proto__.constructor === Person</div></pre></td></tr></table></figure>
</li>
</ul>
<p>了解了这些基本概念之后，我们再来看看javascript的一些原生构造函数的关系网，看下列的图</p>
<p><img src="https://i.stack.imgur.com/KFzI3.png" alt="javascript objects treasure map"><br>引自<a href="http://stackoverflow.com/questions/650764/how-does-proto-differ-from-constructor-prototype" target="_blank" rel="external">stackoverflow</a></p>
<p>按照我们上面的理解, Oject本身是一个构造函数，它也是一个对象，那么<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure></p>
<p>为了方便我们记住上图，还有几个需要我们知道的特殊概念：</p>
<ol>
<li><p><code>Function</code>的原型属性与<code>Function</code>的原型指向同一个对象. 即是</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.__proto__ == <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure>
</li>
<li><p><code>Object.prototype.__proto__ === null</code></p>
</li>
<li><code>typeof Function.prototype === &#39;function&#39;</code></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[在JavaScript中，Function构造函数本身也算是Function类型的实例吗？][<a href="https://www.zhihu.com/question/31333084/answer/152086175" target="_blank" rel="external">https://www.zhihu.com/question/31333084/answer/152086175</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型与原型链是javascript里面最最核心的内容，如果不能理解它们之间的存在关系的话，那么我们是不能理解这门语言的。&lt;/p&gt;
&lt;p&gt;在JS中，主要有两种创建对象的方法, 分别是对象字面量以及调用构造函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对象字面量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://derycktse.github.io/tags/javascript/"/>
    
      <category term="prototype" scheme="https://derycktse.github.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>ES2015读书笔记</title>
    <link href="https://derycktse.github.io/2016/02/22/ES2015%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://derycktse.github.io/2016/02/22/ES2015读书笔记/</id>
    <published>2016-02-22T17:12:12.000Z</published>
    <updated>2017-04-26T16:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><ul>
<li>“模式匹配”： 只要等号两边的模式相同，左边的变量久会被赋予相应的值；如果解构不成功，变量的值就等于<code>undefined</code>。 </li>
<li>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</li>
</ul>
<a id="more"></a>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul>
<li><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>]; <span class="comment">//因为x能取到值，所以函数f根本不会执行</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>
</li>
<li>ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于<code>undefined</code>，默认值是不会生效的。 </li>
</ul>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><ul>
<li>数组的元素是按次序排列的，变量的取值由它的位置决定，而对象的属性没有次序，变量必须与属性同名，才能取到正确的值</li>
<li><p>对象的解构赋值的内部机制，是：先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者(注:对象解构赋值只看分号后面的，如果有的话)</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// "aaa"</span></div><div class="line">foo <span class="comment">// error: foo is not defined</span></div><div class="line"><span class="comment">//上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的解构赋值&quot;&gt;&lt;a href=&quot;#变量的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;变量的解构赋值&quot;&gt;&lt;/a&gt;变量的解构赋值&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“模式匹配”： 只要等号两边的模式相同，左边的变量久会被赋予相应的值；如果解构不成功，变量的值就等于&lt;code&gt;undefined&lt;/code&gt;。 &lt;/li&gt;
&lt;li&gt;只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建工具的对比</title>
    <link href="https://derycktse.github.io/2015/12/24/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>https://derycktse.github.io/2015/12/24/构建工具的对比/</id>
    <published>2015-12-24T06:36:18.000Z</published>
    <updated>2017-05-17T15:01:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>grunt与gulp同为构建工具，而webpack本身则为打包工具，定位不同，所以，下面比价的是grunt跟gulp</p>
<h3 id="Gulp和Grunt的比较"><a href="#Gulp和Grunt的比较" class="headerlink" title="Gulp和Grunt的比较"></a>Gulp和Grunt的比较</h3><ul>
<li>Gulp相比Grunt更简洁，而且遵循代码优于配置策略，维护Gulp更像是写代码。</li>
<li>Gulp相比Grunt更有设计感，核心设计基于Unix流的概念，通过管道连接，不需要写<strong>中间文件</strong>。</li>
<li>Gulp的核心API只有5个，掌握了5个API就学会了Gulp，之后便可以通过管道流组合自己想要的任务。</li>
</ul>
<p>所以相对grunt来说， gulp的性能更加高效，所以grunt我们直接无视</p>
<a id="more"></a>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><p>Gulp 的定位是 Task Runner, 就是用来跑一个一个任务的。gulp是通过一系列插件将原本复杂繁琐的任务自动化，是一个纯粹的工具，并不能将你的css等非js资源模块化，但是webpack可以做到这些。总的来说，gulp是一个自动化任务的工具，所以你可以通过gulp来配置webpack的文件。</p>
<p>Gulp侧重于前端开发的整个过程的控制管理（像是流水线），我们可以通过给gulp配置不通的task（通过Gulp中的gulp.task()方法配置，比如启动server、sass/less预编译、文件的合并压缩等等）来让gulp实现不同的功能，从而构建整个前端开发流程。<br>特点：</p>
<ol>
<li>配置较为简单，学习成本相对低点</li>
<li>不能将css等非js资源模块化</li>
<li>压缩，sourcemap等需要借助插件</li>
<li>定位为task runner</li>
</ol>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>webpack只是具有前端构建的功能而已，其实本质来说webpack是一种模块化的解决方案类似require.js一样，只不过通过插件实现了构建工具的一些功能，例如通过less－loader可以编译less为css并作为模块可以被调用。</p>
<p>Webpack更侧重于模块打包，当然我们可以把开发中的所有资源（图片、js文件、css文件等）都可以看成模块，最初Webpack本身就是为前端JS代码打包而设计的，后来被扩展到其他资源的打包处理。Webpack是通过loader（加载器）和plugins（插件）对资源进行处理的</p>
<p>特点：</p>
<ol>
<li>webpack 遵循commonJS 的形式，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>
<li>能被模块化的不仅仅是 JS ，所有的静态资源，例如css，图片等都能模块化，即以require的方式引入。</li>
<li>开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等</li>
<li>主要定位还是module bundler，在实际开发过程中比如上传ftp等，则无法做到</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grunt与gulp同为构建工具，而webpack本身则为打包工具，定位不同，所以，下面比价的是grunt跟gulp&lt;/p&gt;
&lt;h3 id=&quot;Gulp和Grunt的比较&quot;&gt;&lt;a href=&quot;#Gulp和Grunt的比较&quot; class=&quot;headerlink&quot; title=&quot;Gulp和Grunt的比较&quot;&gt;&lt;/a&gt;Gulp和Grunt的比较&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Gulp相比Grunt更简洁，而且遵循代码优于配置策略，维护Gulp更像是写代码。&lt;/li&gt;
&lt;li&gt;Gulp相比Grunt更有设计感，核心设计基于Unix流的概念，通过管道连接，不需要写&lt;strong&gt;中间文件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Gulp的核心API只有5个，掌握了5个API就学会了Gulp，之后便可以通过管道流组合自己想要的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以相对grunt来说， gulp的性能更加高效，所以grunt我们直接无视&lt;/p&gt;
    
    </summary>
    
    
      <category term="构建" scheme="https://derycktse.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
</feed>
